{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAOC,SAASC,cAAc,SAgCpC,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GAEtCC,YAAW,WACLH,EACFF,EAAQ,CAAEH,WAAUC,UAGpBG,EAAO,CAAEJ,WAAUC,S,GAGpBA,E,IA3CKJ,SAASC,cAAc,UAC/BW,UAAUC,IAAI,iBAGlBd,EAAKe,iBAAiB,UACtB,SAAsBC,GACpBA,EAAMC,iBAMN,IAJA,IAAMC,EAAaC,OAAOnB,EAAKoB,SAASf,MAAMgB,OACxCC,EAAOH,OAAOnB,EAAKoB,SAASE,KAAKD,OACjCE,EAASJ,OAAOnB,EAAKoB,SAASG,OAAOF,OAElCG,EAAI,EAAGA,GAAKD,EAAQC,GAAK,EAAG,CAEnCrB,EAAcqB,EADFN,EAAaI,EAAOE,GAE7BC,MAAK,SAAAC,G,IAAGtB,EAAQsB,EAARtB,SAAUC,EAAKqB,EAALrB,MACjBsB,EAAA7B,GAAS8B,OAAOC,QACd,uBAAwCC,OAAf1B,EAAS,QAAY0B,OAANzB,EAAM,OAEhD0B,QAAQC,IAAI,uBAAwCF,OAAf1B,EAAS,QAAY0B,OAANzB,EAAM,M,IAE3D4B,OAAM,SAAAP,G,IAAGtB,EAAQsB,EAARtB,SAAUC,EAAKqB,EAALrB,MAClBsB,EAAA7B,GAAS8B,OAAOM,QACd,sBAAuCJ,OAAf1B,EAAS,QAAY0B,OAANzB,EAAM,OAG/C0B,QAAQC,IAAI,sBAAqCF,OAAf1B,EAAS,QAAY0B,OAANzB,EAAM,M","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst form = document.querySelector('.form');\nconst btn = document.querySelector('button');\nbtn.classList.add('button-create');\n\n\nform.addEventListener('submit', onSubmitForm);\nfunction onSubmitForm(event) {\n  event.preventDefault();\n\n  const firstDelay = Number(form.elements.delay.value);\n  const step = Number(form.elements.step.value);\n  const amount = Number(form.elements.amount.value);\n\n  for (let i = 1; i <= amount; i += 1) {\n    let delay = firstDelay + step * i;\n    createPromise(i, delay)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`\n        );\n        console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position} in ${delay}ms`\n        );\n\n        console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n  }\n}\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n        // Fulfill\n      } else {\n        reject({ position, delay });\n        // Reject\n      }\n    }, delay);\n  });\n}\n"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$form","document","querySelector","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","classList","add","addEventListener","event","preventDefault","firstDelay","Number","elements","value","step","amount","i","then","param","$parcel$interopDefault","Notify","success","concat","console","log","catch","failure"],"version":3,"file":"03-promises.f7924b86.js.map"}